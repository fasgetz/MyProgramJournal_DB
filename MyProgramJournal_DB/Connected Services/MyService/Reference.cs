//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyProgramJournal_DB.MyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.ITransferService")]
    public interface ITransferService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/GetAllUsersList", ReplyAction="http://tempuri.org/ITransferService/GetAllUsersListResponse")]
        System.Collections.Generic.List<MyModelLibrary.Users> GetAllUsersList(MyModelLibrary.accounts MyAcc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/GetAllUsersList", ReplyAction="http://tempuri.org/ITransferService/GetAllUsersListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MyModelLibrary.Users>> GetAllUsersListAsync(MyModelLibrary.accounts MyAcc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/GetAllAccountsList", ReplyAction="http://tempuri.org/ITransferService/GetAllAccountsListResponse")]
        System.Collections.Generic.List<MyModelLibrary.accounts> GetAllAccountsList(MyModelLibrary.accounts MyAcc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/GetAllAccountsList", ReplyAction="http://tempuri.org/ITransferService/GetAllAccountsListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MyModelLibrary.accounts>> GetAllAccountsListAsync(MyModelLibrary.accounts MyAcc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/AddAccount", ReplyAction="http://tempuri.org/ITransferService/AddAccountResponse")]
        bool AddAccount(MyModelLibrary.accounts AddAcc, MyModelLibrary.accounts CurrentAcc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/AddAccount", ReplyAction="http://tempuri.org/ITransferService/AddAccountResponse")]
        System.Threading.Tasks.Task<bool> AddAccountAsync(MyModelLibrary.accounts AddAcc, MyModelLibrary.accounts CurrentAcc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransferServiceChannel : MyProgramJournal_DB.MyService.ITransferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferServiceClient : System.ServiceModel.ClientBase<MyProgramJournal_DB.MyService.ITransferService>, MyProgramJournal_DB.MyService.ITransferService {
        
        public TransferServiceClient() {
        }
        
        public TransferServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<MyModelLibrary.Users> GetAllUsersList(MyModelLibrary.accounts MyAcc) {
            return base.Channel.GetAllUsersList(MyAcc);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MyModelLibrary.Users>> GetAllUsersListAsync(MyModelLibrary.accounts MyAcc) {
            return base.Channel.GetAllUsersListAsync(MyAcc);
        }
        
        public System.Collections.Generic.List<MyModelLibrary.accounts> GetAllAccountsList(MyModelLibrary.accounts MyAcc) {
            return base.Channel.GetAllAccountsList(MyAcc);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MyModelLibrary.accounts>> GetAllAccountsListAsync(MyModelLibrary.accounts MyAcc) {
            return base.Channel.GetAllAccountsListAsync(MyAcc);
        }
        
        public bool AddAccount(MyModelLibrary.accounts AddAcc, MyModelLibrary.accounts CurrentAcc) {
            return base.Channel.AddAccount(AddAcc, CurrentAcc);
        }
        
        public System.Threading.Tasks.Task<bool> AddAccountAsync(MyModelLibrary.accounts AddAcc, MyModelLibrary.accounts CurrentAcc) {
            return base.Channel.AddAccountAsync(AddAcc, CurrentAcc);
        }
    }
}
