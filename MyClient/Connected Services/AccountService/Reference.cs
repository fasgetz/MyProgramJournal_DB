//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyClient.AccountService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountConnectedException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service.Exceptions")]
    [System.SerializableAttribute()]
    public partial class AccountConnectedException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionName {
            get {
                return this.ExceptionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionNameField, value) != true)) {
                    this.ExceptionNameField = value;
                    this.RaisePropertyChanged("ExceptionName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountService.IMyServiceAccount", CallbackContract=typeof(MyClient.AccountService.IMyServiceAccountCallback))]
    public interface IMyServiceAccount {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyServiceAccount/ConnectUser", ReplyAction="http://tempuri.org/IMyServiceAccount/ConnectUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MyClient.AccountService.AccountConnectedException), Action="http://tempuri.org/IMyServiceAccount/ConnectUserAccountConnectedExceptionFault", Name="AccountConnectedException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service.Exceptions")]
        MyModelLibrary.accounts ConnectUser(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyServiceAccount/ConnectUser", ReplyAction="http://tempuri.org/IMyServiceAccount/ConnectUserResponse")]
        System.Threading.Tasks.Task<MyModelLibrary.accounts> ConnectUserAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyServiceAccount/DisconnectUser")]
        void DisconnectUser(MyModelLibrary.accounts MyAccount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMyServiceAccount/DisconnectUser")]
        System.Threading.Tasks.Task DisconnectUserAsync(MyModelLibrary.accounts MyAccount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceAccountCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyServiceAccount/DoWork", ReplyAction="http://tempuri.org/IMyServiceAccount/DoWorkResponse")]
        bool DoWork();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceAccountChannel : MyClient.AccountService.IMyServiceAccount, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceAccountClient : System.ServiceModel.DuplexClientBase<MyClient.AccountService.IMyServiceAccount>, MyClient.AccountService.IMyServiceAccount {
        
        public MyServiceAccountClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MyServiceAccountClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MyServiceAccountClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceAccountClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceAccountClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public MyModelLibrary.accounts ConnectUser(string login, string password) {
            return base.Channel.ConnectUser(login, password);
        }
        
        public System.Threading.Tasks.Task<MyModelLibrary.accounts> ConnectUserAsync(string login, string password) {
            return base.Channel.ConnectUserAsync(login, password);
        }
        
        public void DisconnectUser(MyModelLibrary.accounts MyAccount) {
            base.Channel.DisconnectUser(MyAccount);
        }
        
        public System.Threading.Tasks.Task DisconnectUserAsync(MyModelLibrary.accounts MyAccount) {
            return base.Channel.DisconnectUserAsync(MyAccount);
        }
    }
}
